var aiwamp=function(e){try{var t=e}catch(n){console.log("AIWamp Behavior E: ",n);var t="profit"}AIs={profit:{},transaction:{}};AIs.profit.params={card:null,rolls:0,chance:5,threshold:1,window:3};AIs.profit.methods={test:function(){alert("I'm a profit  AI!")},onCard:function(e,t,n){console.log("CARD",t);self.params.card=t;self.params.direction=params.card.role=="seller"?1:-1;self.params.compare=params.card.role=="seller"?function(e,t){return e>reserve}:function(e,t){return e<reserve};self.params.offer.price=params.card.reserve+~~(Math.random()*params.window+1)*params.direction;self.sess.call("pit.rpc.offer",[],{id:self.sess.id,offer:params.offer})},onTick:function(e,t,n){function r(){console.log("AI ROLLING",params);return~~(Math.random()*params.chance)<=params.threshold}function i(){console.log("Attempting to find acceptable offer");var e=params.card.role==seller?self.params.offers.buyer.sort(function(e,t){return e.price+t.price})[0]:self.params.offers.seller.sort(function(e,t){return e.price+t.price})[0];params.compare(offer.price,params.card.reserve)&&self.sess.call("pit.rpc.accept",[],{id:self.sess.id,offer:e}).then(function(e){},function(e){console.log("Error: ",e)})}console.log("On Tick");var s=r();console.log("r: ",s);s&&i();self.params.threshold=self.params.threshold>=chance-1?1:self.params.threshold+1},onOffer:function(e,t,n){self.params.offers=t},onPhase:function(e,t,n){console.log("OnPhase: ",t);var r={enter:{},exit:{}};r.exit.setup=function(){self.sess.call("pit.rpc.signin",[],{id:self.sess.id,player:{role:role,position:position,id:self.sess.id,meat:!1,name:"HAL"}});self.sess.call("pit.rpc.offerTemplate").then(function(e){self.params.offer=e})}(r[t.action][t.name])()},onAccept:function(e,t,n){}};this.wampMethods=AIs[t].methods;this.wamp=new WAMP(this);this.wamp.params=AIs[t].params};